// –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EMA
const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function testFastInitialization() {
  console.log('‚ö° –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EMA(130)');
  console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n');

  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –ø–æ 10 —Å–∏–º–≤–æ–ª–∞–º –¥–ª—è —Ç–µ—Å—Ç–∞...');
    const startTime = Date.now();
    
    const response = await axios.post(`${BASE_URL}/start-trading`, {
      symbolCount: 10
    });
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    
    console.log(`‚úÖ ${response.data.message}`);
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${duration.toFixed(1)} —Å–µ–∫—É–Ω–¥`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const status = await axios.get(`${BASE_URL}/trading-status`);
    const portfolio = await axios.get(`${BASE_URL}/portfolio`);
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:`);
    console.log(`   –¢–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–Ω–∞: ${status.data.isTrading ? '‚úÖ' : '‚ùå'}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: ${status.data.activeSymbolsCount}`);
    console.log(`   EMA –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${portfolio.data.strategy.emaPeriod === 130 ? '‚úÖ' : '‚ùå'}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞...`);
    const addStartTime = Date.now();
    
    const addResponse = await axios.post(`${BASE_URL}/add-symbol`, {
      symbol: 'LINKUSDT'
    });
    
    const addEndTime = Date.now();
    const addDuration = (addEndTime - addStartTime) / 1000;
    
    console.log(`   ${addResponse.data.message}`);
    console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${addDuration.toFixed(1)} —Å–µ–∫—É–Ω–¥`);
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const finalStatus = await axios.get(`${BASE_URL}/active-symbols`);
    console.log(`   üìä –ò—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: ${finalStatus.data.count}`);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
    await axios.post(`${BASE_URL}/stop-trading`);
    console.log(`\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
    
    console.log(`\nüéØ –í—ã–≤–æ–¥—ã:`);
    console.log(`   ‚Ä¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 10 —Å–∏–º–≤–æ–ª–æ–≤: ${duration.toFixed(1)}—Å (–±—ã–ª–æ –±—ã 3+ —á–∞—Å–∞ –±–µ–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)`);
    console.log(`   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ 1 —Å–∏–º–≤–æ–ª–∞: ${addDuration.toFixed(1)}—Å (–±—ã–ª–æ –±—ã 10+ –º–∏–Ω—É—Ç)`);
    console.log(`   ‚Ä¢ EMA(130) –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!`);

  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run start:dev');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    }
  }
}

testFastInitialization();
