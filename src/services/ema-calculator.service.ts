import { Injectable, Logger } from '@nestjs/common';
import { KlineData, EMAData, EMASignal } from '../interfaces/trading.interface';

@Injectable()
export class EMACalculatorService {
  private readonly logger = new Logger(EMACalculatorService.name);
  private readonly emaHistory: Map<string, number[]> = new Map(); // symbol -> price history
  private readonly emaValues: Map<string, number> = new Map(); // symbol -> current EMA
  private readonly previousEMAValues: Map<string, number> = new Map(); // –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π

  constructor() {
    this.logger.log('üìä EMA Calculator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º EMA –Ω–∞ –Ω–æ–≤–æ–π —Å–≤–µ—á–µ
  updateEMA(kline: KlineData, period: number = 130): EMAData | null {
    const symbol = kline.symbol;
    const price = parseFloat(kline.close);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Å–∏–º–≤–æ–ª–∞
    if (!this.emaHistory.has(symbol)) {
      this.emaHistory.set(symbol, []);
    }
    
    const prices = this.emaHistory.get(symbol)!;
    prices.push(price);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ SMA)
    if (prices.length > period * 2) {
      prices.shift();
    }
    
    let emaValue: number;
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º SMA –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (prices.length < period) {
      return null; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
    } else if (prices.length === period) {
      // –ü–µ—Ä–≤—ã–π —Ä–∞—Å—á–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º SMA
      emaValue = prices.reduce((sum, p) => sum + p, 0) / period;
    } else {
      // –û–±—ã—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç EMA
      const multiplier = 2 / (period + 1);
      const previousEMA = this.emaValues.get(symbol) || 0;
      emaValue = (price * multiplier) + (previousEMA * (1 - multiplier));
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
    const previousValue = this.emaValues.get(symbol);
    if (previousValue !== undefined) {
      this.previousEMAValues.set(symbol, previousValue);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    this.emaValues.set(symbol, emaValue);
    
    return {
      symbol,
      period,
      value: emaValue,
      timestamp: kline.closeTime,
    };
  }

  // –î–µ—Ç–µ–∫—Ü–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏ EMA
  detectEMACrossing(kline: KlineData, period: number = 130): EMASignal | null {
    const symbol = kline.symbol;
    const currentPrice = parseFloat(kline.close);
    const previousPrice = parseFloat(kline.open);
    
    const currentEMA = this.emaValues.get(symbol);
    const previousEMA = this.previousEMAValues.get(symbol);
    
    if (!currentEMA || !previousEMA) {
      return null; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö (CROSS_UP)
    if (previousPrice <= previousEMA && currentPrice > currentEMA) {
      this.logger.log(`üî• ${symbol}: –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ EMA –°–ù–ò–ó–£ –í–í–ï–†–•! –¶–µ–Ω–∞: ${currentPrice.toFixed(4)}, EMA: ${currentEMA.toFixed(4)}`);
      return {
        symbol,
        type: 'CROSS_UP',
        currentPrice,
        emaValue: currentEMA,
        timestamp: kline.closeTime,
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ (CROSS_DOWN)
    if (previousPrice >= previousEMA && currentPrice < currentEMA) {
      this.logger.log(`‚ùÑÔ∏è ${symbol}: –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ EMA –°–í–ï–†–•–£ –í–ù–ò–ó! –¶–µ–Ω–∞: ${currentPrice.toFixed(4)}, EMA: ${currentEMA.toFixed(4)}`);
      return {
        symbol,
        type: 'CROSS_DOWN',
        currentPrice,
        emaValue: currentEMA,
        timestamp: kline.closeTime,
      };
    }
    
    return null;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ EMA
  getCurrentEMA(symbol: string): number | null {
    return this.emaValues.get(symbol) || null;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã—à–µ –∏–ª–∏ –Ω–∏–∂–µ —Ü–µ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ EMA
  isPriceAboveEMA(symbol: string, price: number): boolean | null {
    const ema = this.getCurrentEMA(symbol);
    if (!ema) return null;
    return price > ema;
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
  clearData(symbol: string): void {
    this.emaHistory.delete(symbol);
    this.emaValues.delete(symbol);
    this.previousEMAValues.delete(symbol);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  getStats(): any {
    return {
      trackedSymbols: this.emaValues.size,
      emaValues: Object.fromEntries(this.emaValues.entries()),
    };
  }
}
