import { Injectable, Logger } from '@nestjs/common';
import { Order, PositionGroup, StrategyStats, PartialCloseResult } from '../interfaces/trading.interface';

@Injectable()
export class OrderManagerService {
  private readonly logger = new Logger(OrderManagerService.name);
  private readonly positions: Map<string, PositionGroup> = new Map();
  private readonly orderHistory: Order[] = [];
  private orderIdCounter = 1;
  private virtualBalance = 10000; // –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å

  constructor() {
    this.logger.log('üìã Order Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –û—Ç–∫—Ä—ã—Ç—å –ø–µ—Ä–≤–∏—á–Ω—ã–π LONG –ø–æ–∑–∏—Ü–∏—é (–ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ EMA —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)
  openEntryLongOrder(symbol: string, price: number, quantity: number): Order {
    const order: Order = {
      id: `L${this.orderIdCounter++}`,
      symbol,
      side: 'LONG',
      type: 'ENTRY',
      quantity,
      price,
      timestamp: Date.now(),
      status: 'OPEN',
      orderIndex: this.getNextLongIndex(symbol),
    };

    this.addOrderToPosition(order);
    this.orderHistory.push(order);

    this.logger.log(`‚úÖ ENTRY LONG –û–¢–ö–†–´–¢: ${symbol} | ID: ${order.id}`);
    this.logger.log(`   üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${price.toFixed(4)} USDT`);
    this.logger.log(`   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity.toFixed(4)}`);
    this.logger.log(`   üíµ –û–±—ä–µ–º: ${(price * quantity).toFixed(2)} USDT`);

    return order;
  }

  // –û—Ç–∫—Ä—ã—Ç—å LONG –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
  openAverageLongOrder(symbol: string, price: number, quantity: number): Order {
    const order: Order = {
      id: `L${this.orderIdCounter++}`,
      symbol,
      side: 'LONG',
      type: 'AVERAGE',
      quantity,
      price,
      timestamp: Date.now(),
      status: 'OPEN',
      orderIndex: this.getNextLongIndex(symbol),
    };

    this.addOrderToPosition(order);
    this.orderHistory.push(order);

    this.logger.log(`‚úÖ AVERAGE LONG –û–¢–ö–†–´–¢: ${symbol} | ID: ${order.id}`);
    this.logger.log(`   üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${price.toFixed(4)} USDT`);
    this.logger.log(`   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity.toFixed(4)}`);
    this.logger.log(`   üíµ –û–±—ä–µ–º: ${(price * quantity).toFixed(2)} USDT`);

    return order;
  }

  // –û—Ç–∫—Ä—ã—Ç—å SHORT –ø–æ–∑–∏—Ü–∏—é (—Ö–µ–¥–∂ —Ä–∞–≤–Ω—ã–π –æ–±—ä–µ–º—É –≤—Å–µ—Ö –ª–æ–Ω–≥–æ–≤)
  openHedgeShortOrder(symbol: string, price: number, totalLongSize: number): Order {
    const order: Order = {
      id: `S${this.orderIdCounter++}`,
      symbol,
      side: 'SHORT',
      type: 'HEDGE',
      quantity: totalLongSize,
      price,
      timestamp: Date.now(),
      status: 'OPEN',
    };

    this.addOrderToPosition(order);
    this.orderHistory.push(order);

    this.logger.log(`‚úÖ HEDGE SHORT –û–¢–ö–†–´–¢: ${symbol} | ID: ${order.id}`);
    this.logger.log(`   üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${price.toFixed(4)} USDT`);
    this.logger.log(`   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${totalLongSize.toFixed(4)} (= –æ–±—ä–µ–º—É –ª–æ–Ω–≥–æ–≤)`);
    this.logger.log(`   üíµ –û–±—ä–µ–º: ${(price * totalLongSize).toFixed(2)} USDT`);

    return order;
  }

  // –ö–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∑–∞–∫—Ä—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–Ω–≥–æ–≤ —Å –ø—Ä–æ—Ñ–∏—Ç–æ–º
  closeLastProfitableLongs(symbol: string, currentPrice: number): PartialCloseResult {
    const position = this.positions.get(symbol);
    if (!position || position.longOrders.length === 0) {
      return {
        closedOrders: [],
        totalClosedQuantity: 0,
        totalPnl: 0,
        remainingLongSize: position?.totalLongSize || 0,
      };
    }

    const openLongs = position.longOrders
      .filter(o => o.status === 'OPEN')
      .sort((a, b) => (b.orderIndex || 0) - (a.orderIndex || 0)); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫ –ø–µ—Ä–≤—ã–º

    const closedOrders: Order[] = [];
    let totalPnl = 0;
    let totalClosedQuantity = 0;

    // –ü—Ä–æ—Ö–æ–¥–∏–º –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ä–¥–µ—Ä–∞ –∫ –ø–µ—Ä–≤–æ–º—É
    for (const order of openLongs) {
      const orderPnl = (currentPrice - order.price) * order.quantity;
      const potentialTotalPnl = totalPnl + orderPnl;

      // –ï—Å–ª–∏ –æ–±—â–∏–π PnL –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –Ω—É–ª–µ–≤—ã–º, –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ä–¥–µ—Ä
      if (potentialTotalPnl >= 0) {
        order.status = 'CLOSED';
        order.closePrice = currentPrice;
        order.closeTime = Date.now();
        order.pnl = orderPnl;

        closedOrders.push(order);
        totalPnl += orderPnl;
        totalClosedQuantity += order.quantity;

        this.logger.log(`üí∞ LONG –ó–ê–ö–†–´–¢: ${symbol} | ID: ${order.id}`);
        this.logger.log(`   üìä –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${order.price.toFixed(4)} ‚Üí –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: ${currentPrice.toFixed(4)}`);
        this.logger.log(`   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.quantity.toFixed(4)}`);
        this.logger.log(`   üíµ PnL: ${orderPnl >= 0 ? '+' : ''}${orderPnl.toFixed(2)} USDT`);
      } else {
        // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –¥–µ–ª–∞–µ—Ç –æ–±—â–∏–π PnL –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        break;
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    this.virtualBalance += totalPnl;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    this.updatePositionStats(position);

    const remainingLongSize = position.totalLongSize;

    this.logger.log(
      `üìä ${symbol}: –ó–∞–∫—Ä—ã—Ç–æ ${closedOrders.length} –æ—Ä–¥–µ—Ä–æ–≤ | ` +
      `–û–±—â–∏–π PnL: +${totalPnl.toFixed(2)} USDT | ` +
      `–û—Å—Ç–∞–ª–æ—Å—å –ª–æ–Ω–≥–æ–≤: ${remainingLongSize.toFixed(4)}`
    );

    return {
      closedOrders,
      totalClosedQuantity,
      totalPnl,
      remainingLongSize,
    };
  }

  // –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —à–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ª–æ–Ω–≥–æ–≤
  adjustHedgeSize(symbol: string, currentPrice: number, newLongSize: number): Order | null {
    const position = this.positions.get(symbol);
    if (!position) return null;

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à–æ—Ä—Ç—ã
    this.closeAllShorts(symbol, currentPrice);

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–Ω–≥–∏, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ö–µ–¥–∂
    if (newLongSize > 0) {
      return this.openHedgeShortOrder(symbol, currentPrice, newLongSize);
    }

    return null;
  }

  // –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ SHORT –æ—Ä–¥–µ—Ä–∞
  closeAllShorts(symbol: string, currentPrice: number): Order[] {
    const position = this.positions.get(symbol);
    if (!position) return [];

    const closedOrders: Order[] = [];

    for (const order of position.shortOrders.filter(o => o.status === 'OPEN')) {
      const pnl = (order.price - currentPrice) * order.quantity; // –î–ª—è —à–æ—Ä—Ç–∞ PnL –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
      order.status = 'CLOSED';
      order.closePrice = currentPrice;
      order.closeTime = Date.now();
      order.pnl = pnl;
      
      this.virtualBalance += pnl;
      closedOrders.push(order);
      
      this.logger.log(`üíú SHORT –ó–ê–ö–†–´–¢: ${symbol} | ID: ${order.id}`);
      this.logger.log(`   üìä –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${order.price.toFixed(4)} ‚Üí –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: ${currentPrice.toFixed(4)}`);
      this.logger.log(`   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.quantity.toFixed(4)}`);
      this.logger.log(`   üíµ PnL: ${pnl >= 0 ? '+' : ''}${pnl.toFixed(2)} USDT`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    this.updatePositionStats(position);

    return closedOrders;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ª–æ–Ω–≥ –æ—Ä–¥–µ—Ä–∞
  private getNextLongIndex(symbol: string): number {
    const position = this.positions.get(symbol);
    if (!position) return 1;
    return position.lastLongIndex + 1;
  }

  // –î–æ–±–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –∫ –ø–æ–∑–∏—Ü–∏–∏
  private addOrderToPosition(order: Order): void {
    if (!this.positions.has(order.symbol)) {
      this.positions.set(order.symbol, {
        symbol: order.symbol,
        longOrders: [],
        shortOrders: [],
        totalLongSize: 0,
        totalShortSize: 0,
        averageLongPrice: 0,
        unrealizedPnl: 0,
        isHedged: false,
        lastLongIndex: 0,
      });
    }

    const position = this.positions.get(order.symbol)!;

    if (order.side === 'LONG') {
      position.longOrders.push(order);
      if (order.orderIndex && order.orderIndex > position.lastLongIndex) {
        position.lastLongIndex = order.orderIndex;
      }
    } else {
      position.shortOrders.push(order);
    }

    this.updatePositionStats(position);
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∑–∏—Ü–∏–∏
  private updatePositionStats(position: PositionGroup): void {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ª–æ–Ω–≥–∏ –∏ —à–æ—Ä—Ç—ã
    const openLongs = position.longOrders.filter(o => o.status === 'OPEN');
    const openShorts = position.shortOrders.filter(o => o.status === 'OPEN');

    position.totalLongSize = openLongs.reduce((sum, o) => sum + o.quantity, 0);
    position.totalShortSize = openShorts.reduce((sum, o) => sum + o.quantity, 0);

    // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ª–æ–Ω–≥–æ–≤
    if (openLongs.length > 0) {
      const totalValue = openLongs.reduce((sum, o) => sum + (o.price * o.quantity), 0);
      position.averageLongPrice = totalValue / position.totalLongSize;
    }

    position.isHedged = position.totalShortSize > 0;

    // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π, —É–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç—ã
    if (position.totalLongSize === 0 && position.totalShortSize === 0) {
      this.positions.delete(position.symbol);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –ª–æ–Ω–≥–∏ –±–µ–∑ —Ö–µ–¥–∂–∞
  hasUnhedgedLongs(symbol: string): boolean {
    const position = this.positions.get(symbol);
    return position ? position.totalLongSize > 0 && !position.isHedged : false;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∏–º–≤–æ–ª—É
  getPosition(symbol: string): PositionGroup | null {
    return this.positions.get(symbol) || null;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
  getAllPositions(): PositionGroup[] {
    return Array.from(this.positions.values());
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  getStats(): StrategyStats {
    const totalOrders = this.orderHistory.length;
    const longOrders = this.orderHistory.filter(o => o.side === 'LONG').length;
    const shortOrders = this.orderHistory.filter(o => o.side === 'SHORT').length;
    const closedOrders = this.orderHistory.filter(o => o.status === 'CLOSED');
    
    const totalPnl = closedOrders.reduce((sum, o) => sum + (o.pnl || 0), 0);
    const winningTrades = closedOrders.filter(o => (o.pnl || 0) > 0).length;
    const winRate = closedOrders.length > 0 ? (winningTrades / closedOrders.length) * 100 : 0;

    return {
      totalOrders,
      longOrders,
      shortOrders,
      closedOrders: closedOrders.length,
      totalPnl,
      winRate,
      activePositions: this.positions.size,
      balance: this.virtualBalance,
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å
  getBalance(): number {
    return this.virtualBalance;
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
  clearPosition(symbol: string): void {
    this.positions.delete(symbol);
  }
}
