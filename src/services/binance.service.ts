import { Injectable, Logger } from '@nestjs/common';
import { KlineData } from '../interfaces/trading.interface';

@Injectable()
export class BinanceService {
  private readonly logger = new Logger(BinanceService.name);
  private ws: any = null;
  private readonly baseUrl = 'https://api.binance.com';
  private readonly wsUrl = 'wss://stream.binance.com:9443/ws';
  
  constructor() {
    this.logger.log('üîó Binance Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–±–µ–∑ WebSocket)');
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –ø–æ –æ–±—ä–µ–º—É
  async getTopSymbols(limit: number = 20): Promise<string[]> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v3/ticker/24hr`);
      const tickers = await response.json();
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
      const usdtPairs = tickers
        .filter((ticker: any) => ticker.symbol.endsWith('USDT'))
        .sort((a: any, b: any) => parseFloat(b.volume) - parseFloat(a.volume))
        .slice(0, limit)
        .map((ticker: any) => ticker.symbol);

      this.logger.log(`üìà –ü–æ–ª—É—á–µ–Ω—ã —Ç–æ–ø ${limit} USDT –ø–∞—Ä: ${usdtPairs.slice(0, 5).join(', ')}...`);
      return usdtPairs;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤: ${error.message}`);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞
  async getCurrentPrice(symbol: string): Promise<number | null> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v3/ticker/price?symbol=${symbol}`);
      const data = await response.json();
      return parseFloat(data.price);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã ${symbol}: ${error.message}`);
      return null;
    }
  }

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ klines (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  subscribeToKlines(
    symbols: string[], 
    interval: string = '5m',
    onKline: (kline: KlineData) => void,
    onError?: (error: Error) => void
  ): void {
    this.logger.log(`üìä –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ klines –¥–ª—è ${symbols.length} —Å–∏–º–≤–æ–ª–æ–≤ (${interval})`);
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  }

  // –û—Ç–∫–ª—é—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  disconnect(): void {
    this.logger.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞)');
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  getConnectionStatus(): string {
    return 'SIMULATION_MODE';
  }
}
