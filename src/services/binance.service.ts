import { Injectable, Logger } from '@nestjs/common';
import { KlineData } from '../interfaces/trading.interface';

@Injectable()
export class BinanceService {
  private readonly logger = new Logger(BinanceService.name);
  private ws: any = null;
  private readonly baseUrl = 'https://api.binance.com';
  private readonly wsUrl = 'wss://stream.binance.com:9443/ws';
  
  constructor() {
    this.logger.log('üîó Binance Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –ø–æ –æ–±—ä–µ–º—É
  async getTopSymbols(limit: number = 150): Promise<string[]> {
    try {
      this.logger.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø ${limit} USDT –ø–∞—Ä...`);
      const response = await fetch(`${this.baseUrl}/api/v3/ticker/24hr`);
      const tickers = await response.json();
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã, –∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã
      const excludeList = ['USDCUSDT', 'BUSDUSDT', 'TUSDUSDT', 'DAIUSDT', 'USTCUSDT', 'FDUSDUSDT'];
      
      const usdtPairs = tickers
        .filter((ticker: any) => {
          const symbol = ticker.symbol;
          return symbol.endsWith('USDT') && 
                 !excludeList.includes(symbol) &&
                 parseFloat(ticker.volume) > 1000000; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º 1M USDT
        })
        .sort((a: any, b: any) => parseFloat(b.quoteVolume) - parseFloat(a.quoteVolume))
        .slice(0, limit)
        .map((ticker: any) => ticker.symbol);

      this.logger.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${usdtPairs.length} –º–æ–Ω–µ—Ç. –¢–æ–ø-10: ${usdtPairs.slice(0, 10).join(', ')}...`);
      
      return usdtPairs;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤: ${error.message}`);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
      return [
        'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'XRPUSDT', 'ADAUSDT', 
        'SOLUSDT', 'DOGEUSDT', 'DOTUSDT', 'MATICUSDT', 'AVAXUSDT'
      ];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ klines –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EMA
  async getHistoricalKlines(symbol: string, interval: string = '5m', limit: number = 200): Promise<KlineData[]> {
    try {
      this.logger.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ ${limit} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è ${symbol}...`);
      
      const response = await fetch(
        `${this.baseUrl}/api/v3/klines?symbol=${symbol}&interval=${interval}&limit=${limit}`
      );
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      
      const klines: KlineData[] = data.map((candle: any[]) => ({
        symbol,
        openTime: candle[0],
        closeTime: candle[6],
        open: candle[1],
        high: candle[2],
        low: candle[3],
        close: candle[4],
        volume: candle[5],
      }));
      
      this.logger.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${klines.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è ${symbol}`);
      return klines;
      
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}: ${error.message}`);
      // Fallback –∫ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
      return this.simulateKlineData(symbol);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ä–∞–∑—É
  async getMultiplePrices(symbols: string[]): Promise<Map<string, number>> {
    const priceMap = new Map<string, number>();
    
    try {
      const response = await fetch(`${this.baseUrl}/api/v3/ticker/price`);
      const allPrices = await response.json();
      
      const symbolsSet = new Set(symbols);
      
      for (const ticker of allPrices) {
        if (symbolsSet.has(ticker.symbol)) {
          priceMap.set(ticker.symbol, parseFloat(ticker.price));
        }
      }
      
      this.logger.log(`üìä –ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–Ω—ã –¥–ª—è ${priceMap.size}/${symbols.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ü–µ–Ω: ${error.message}`);
    }
    
    return priceMap;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞
  async getCurrentPrice(symbol: string): Promise<number | null> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v3/ticker/price?symbol=${symbol}`);
      const data = await response.json();
      return parseFloat(data.price);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã ${symbol}: ${error.message}`);
      return null;
    }
  }

  // –°–∏–º—É–ª—è—Ü–∏—è kline –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  async simulateKlineData(symbol: string, priceRange: number[] = []): Promise<KlineData[]> {
    this.logger.log(`üé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö kline –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}`);
    
    const currentPrice = await this.getCurrentPrice(symbol) || 50000;
    const baseTime = Date.now() - (200 * 5 * 60 * 1000); // 200 —Å–≤–µ—á–µ–π –Ω–∞–∑–∞–¥
    
    const klines: KlineData[] = [];
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
    const prices = priceRange.length > 0 ? priceRange : this.generatePriceMovement(currentPrice, 200);
    
    for (let i = 0; i < prices.length; i++) {
      const openTime = baseTime + (i * 5 * 60 * 1000);
      const closeTime = openTime + (5 * 60 * 1000) - 1;
      
      const price = prices[i];
      const variation = price * 0.001;
      
      klines.push({
        symbol,
        openTime,
        closeTime,
        open: i > 0 ? prices[i-1].toString() : price.toString(),
        high: (price + variation).toString(),
        low: (price - variation).toString(),
        close: price.toString(),
        volume: '1000000',
      });
    }
    
    return klines;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
  private generatePriceMovement(startPrice: number, count: number): number[] {
    const prices: number[] = [];
    let currentPrice = startPrice;
    
    for (let i = 0; i < count; i++) {
      const change = (Math.random() - 0.5) * 0.02;
      currentPrice = currentPrice * (1 + change);
      prices.push(currentPrice);
    }
    
    return prices;
  }

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ klines
  subscribeToKlines(
    symbols: string[], 
    interval: string = '5m',
    onKline: (kline: KlineData) => void,
    onError?: (error: Error) => void
  ): void {
    this.logger.log(`üìä SIMULATION MODE: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${symbols.length} —Å–∏–º–≤–æ–ª–æ–≤ (${interval})`);
  }

  // –û—Ç–∫–ª—é—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  disconnect(): void {
    this.logger.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ Binance —Å–µ—Ä–≤–∏—Å–∞');
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  getConnectionStatus(): string {
    return 'SIMULATION_MODE';
  }
}
