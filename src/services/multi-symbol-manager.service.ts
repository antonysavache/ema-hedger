import { Injectable, Logger } from '@nestjs/common';
import { BinanceService } from './binance.service';
import { EMAHedgerStrategyService } from './ema-hedger-strategy.service';
import { KlineData } from '../interfaces/trading.interface';

@Injectable()
export class MultiSymbolManagerService {
  private readonly logger = new Logger(MultiSymbolManagerService.name);
  private activeSymbols: string[] = [];
  private isTrading = false;
  private simulationInterval: NodeJS.Timeout | null = null;

  constructor(
    private binanceService: BinanceService,
    private strategy: EMAHedgerStrategyService,
  ) {
    this.logger.log('üéØ Multi Symbol Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –ù–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é –ø–æ —Ç–æ–ø —Å–∏–º–≤–æ–ª–∞–º
  async startTradingTopSymbols(count: number = 150): Promise<void> {
    if (this.isTrading) {
      this.logger.warn('‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
      return;
    }

    this.logger.log(`üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ —Ç–æ–ø ${count} —Å–∏–º–≤–æ–ª–∞–º...`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å–∏–º–≤–æ–ª—ã
      this.activeSymbols = await this.binanceService.getTopSymbols(count);
      
      if (this.activeSymbols.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤');
      }

      this.logger.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${this.activeSymbols.length} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏`);
      this.logger.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: ${this.activeSymbols.slice(0, 10).join(', ')}...`);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º EMA –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
      await this.initializeEMAForSymbols();

      this.isTrading = true;
      this.logger.log(`üéØ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ ${this.activeSymbols.length} —Å–∏–º–≤–æ–ª–∞–º`);

      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç WebSocket –ø–æ–¥–ø–∏—Å–∫–∞
      // –ü–æ–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      if (process.env.NODE_ENV !== 'production') {
        this.startSimulation();
      }

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: ${error.message}`);
      throw error;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EMA –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  private async initializeEMAForSymbols(): Promise<void> {
    this.logger.log(`‚ö° –ë–´–°–¢–†–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EMA(130) –¥–ª—è ${this.activeSymbols.length} —Å–∏–º–≤–æ–ª–æ–≤...`);
    this.logger.log(`üìä –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å Binance...`);
    
    let successCount = 0;
    let failCount = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –±–∞—Ç—á–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
    const batchSize = 5;
    for (let i = 0; i < this.activeSymbols.length; i += batchSize) {
      const batch = this.activeSymbols.slice(i, i + batchSize);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const batchPromises = batch.map(async (symbol) => {
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
          const historicalKlines = await this.binanceService.getHistoricalKlines(symbol, '5m', 200);
          
          if (historicalKlines.length < 130) {
            throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: ${historicalKlines.length}/130`);
          }

          // –ë—ã—Å—Ç—Ä–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
          for (const kline of historicalKlines) {
            await this.strategy.processKline(kline);
          }
          
          return { symbol, success: true };
        } catch (error) {
          this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ${symbol}: ${error.message}`);
          return { symbol, success: false };
        }
      });

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞—Ç—á–∞
      const results = await Promise.all(batchPromises);
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      results.forEach(result => {
        if (result.success) {
          successCount++;
        } else {
          failCount++;
        }
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const processed = i + batch.length;
      this.logger.log(`üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed}/${this.activeSymbols.length} —Å–∏–º–≤–æ–ª–æ–≤ | ‚úÖ ${successCount} | ‚ùå ${failCount}`);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
      if (i + batchSize < this.activeSymbols.length) {
        await new Promise(resolve => setTimeout(resolve, 1000)); // 1 —Å–µ–∫—É–Ω–¥–∞ –ø–∞—É–∑–∞
      }
    }

    this.logger.log(`‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${failCount} –æ—à–∏–±–æ–∫`);
    this.logger.log(`üöÄ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ!`);
  }

  // –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
  private startSimulation(): void {
    this.logger.log(`üé≠ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ = 5-–º–∏–Ω—É—Ç–Ω–∞—è —Å–≤–µ—á–∞)`);

    this.simulationInterval = setInterval(async () => {
      await this.simulateMarketTick();
    }, 30000); // 30 —Å–µ–∫—É–Ω–¥ = –æ–¥–Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—è 5-–º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–µ—á–∏
  }

  // –°–∏–º—É–ª—è—Ü–∏—è —Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞
  private async simulateMarketTick(): Promise<void> {
    if (!this.isTrading) return;

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (—Å–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
      const randomSymbols = this.getRandomSymbols(5); // –ë–µ—Ä–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
      const prices = await this.binanceService.getMultiplePrices(randomSymbols);

      for (const [symbol, price] of prices) {
        // –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é kline —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ü–µ–Ω—ã
        const variation = (Math.random() - 0.5) * 0.02; // ¬±1% –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        const newPrice = price * (1 + variation);

        const kline: KlineData = {
          symbol,
          openTime: Date.now() - 5 * 60 * 1000,
          closeTime: Date.now(),
          open: price.toString(),
          high: Math.max(price, newPrice).toString(),
          low: Math.min(price, newPrice).toString(),
          close: newPrice.toString(),
          volume: '100000',
        };

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–µ—á—É
        await this.strategy.processKline(kline);
      }

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: ${error.message}`);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
  private getRandomSymbols(count: number): string[] {
    const shuffled = [...this.activeSymbols].sort(() => Math.random() - 0.5);
    return shuffled.slice(0, count);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
  async stopTrading(): Promise<void> {
    if (!this.isTrading) {
      this.logger.warn('‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞');
      return;
    }

    this.logger.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏...');

    this.isTrading = false;
    
    if (this.simulationInterval) {
      clearInterval(this.simulationInterval);
      this.simulationInterval = null;
    }

    this.binanceService.disconnect();
    this.logger.log('‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏
  getTradingStatus(): any {
    return {
      isTrading: this.isTrading,
      activeSymbolsCount: this.activeSymbols.length,
      activeSymbols: this.activeSymbols.slice(0, 20), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
      mode: process.env.NODE_ENV === 'production' ? 'LIVE' : 'SIMULATION',
      connectionStatus: this.binanceService.getConnectionStatus(),
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  getActiveSymbols(): string[] {
    return this.activeSymbols;
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â—É—é kline (–¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ WebSocket)
  async processIncomingKline(kline: KlineData): Promise<void> {
    if (!this.isTrading) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
    if (!this.activeSymbols.includes(kline.symbol)) return;

    await this.strategy.processKline(kline);
  }

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–∏–º–≤–æ–ª —Å –±—ã—Å—Ç—Ä–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
  async addSymbol(symbol: string): Promise<boolean> {
    if (this.activeSymbols.includes(symbol)) {
      this.logger.warn(`‚ö†Ô∏è –°–∏–º–≤–æ–ª ${symbol} —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è`);
      return false;
    }

    try {
      this.logger.log(`‚ö° –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ ${symbol} —Å –±—ã—Å—Ç—Ä–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const price = await this.binanceService.getCurrentPrice(symbol);
      if (!price) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è ${symbol}`);
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º EMA
      const historicalKlines = await this.binanceService.getHistoricalKlines(symbol, '5m', 200);
      
      if (historicalKlines.length < 130) {
        this.logger.warn(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}: ${historicalKlines.length}/130`);
        // –í—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
      }

      // –ë—ã—Å—Ç—Ä–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      for (const kline of historicalKlines) {
        await this.strategy.processKline(kline);
      }

      this.activeSymbols.push(symbol);
      this.logger.log(`‚úÖ –°–∏–º–≤–æ–ª ${symbol} –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (${historicalKlines.length} —Å–≤–µ—á–µ–π)`);
      
      return true;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ ${symbol}: ${error.message}`);
      return false;
    }
  }

  // –£–¥–∞–ª–∏—Ç—å —Å–∏–º–≤–æ–ª –∏–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏
  removeSymbol(symbol: string): boolean {
    const index = this.activeSymbols.indexOf(symbol);
    if (index === -1) {
      this.logger.warn(`‚ö†Ô∏è –°–∏–º–≤–æ–ª ${symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ`);
      return false;
    }

    this.activeSymbols.splice(index, 1);
    this.logger.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å–∏–º–≤–æ–ª: ${symbol}`);
    return true;
  }
}
