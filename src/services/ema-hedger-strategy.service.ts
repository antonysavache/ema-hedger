import { Injectable, Logger } from '@nestjs/common';
import { KlineData, EMASignal } from '../interfaces/trading.interface';
import { EMACalculatorService } from './ema-calculator.service';
import { OrderManagerService } from './order-manager.service';

@Injectable()
export class EMAHedgerStrategyService {
  private readonly logger = new Logger(EMAHedgerStrategyService.name);
  private readonly emaPeriod = 50; // –ü–µ—Ä–∏–æ–¥ EMA
  private readonly orderSize = 100; // –†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ –≤ USDT

  constructor(
    private emaCalculator: EMACalculatorService,
    private orderManager: OrderManagerService,
  ) {
    this.logger.log('üéØ EMA Hedger Strategy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    this.logger.log(`üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏: EMA ${this.emaPeriod}, –†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ ${this.orderSize} USDT`);
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏
  async processKline(kline: KlineData): Promise<void> {
    const symbol = kline.symbol;
    const currentPrice = parseFloat(kline.close);

    try {
      // 1. –û–±–Ω–æ–≤–ª—è–µ–º EMA
      const emaData = this.emaCalculator.updateEMA(kline, this.emaPeriod);
      if (!emaData) {
        return; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EMA
      }

      const emaValue = emaData.value;
      this.logger.debug(`üìä ${symbol}: –¶–µ–Ω–∞ ${currentPrice.toFixed(4)} | EMA ${emaValue.toFixed(4)} | ${currentPrice > emaValue ? '‚¨ÜÔ∏è –í—ã—à–µ' : '‚¨áÔ∏è –ù–∏–∂–µ'} EMA`);

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è EMA
      const signal = this.emaCalculator.detectEMACrossing(kline, this.emaPeriod);
      if (signal) {
        await this.handleEMASignal(signal);
      }

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ü–µ–Ω–∞ –∏–¥–µ—Ç –ø—Ä–æ—Ç–∏–≤ –Ω–∞—Å)
      await this.checkForAveraging(symbol, currentPrice);

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${symbol}: ${error.message}`);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è EMA
  private async handleEMASignal(signal: EMASignal): Promise<void> {
    const { symbol, type, currentPrice } = signal;
    const position = this.orderManager.getPosition(symbol);
    const quantity = this.orderSize / currentPrice;

    this.logger.log(`\nüéØ === –°–ò–ì–ù–ê–õ EMA –¥–ª—è ${symbol} ===`);
    this.logger.log(`üìà –¢–∏–ø: ${type === 'CROSS_UP' ? 'üü¢ –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï –°–ù–ò–ó–£ –í–í–ï–†–•' : 'üî¥ –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï –°–í–ï–†–•–£ –í–ù–ò–ó'}`);
    this.logger.log(`üí∞ –¶–µ–Ω–∞: ${currentPrice.toFixed(4)} USDT`);

    if (type === 'CROSS_UP') {
      // –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö - –æ—Ç–∫—Ä—ã–≤–∞–µ–º LONG
      
      if (!position || position.totalLongSize === 0) {
        // –ü–ï–†–í–ò–ß–ù–´–ô –í–•–û–î –í –õ–û–ù–ì
        this.logger.log(`üöÄ –î–ï–ô–°–¢–í–ò–ï: –û—Ç–∫—Ä—ã–≤–∞–µ–º –ü–ï–†–í–ò–ß–ù–´–ô –õ–û–ù–ì`);
        this.logger.log(`üì¶ –†–∞–∑–º–µ—Ä: ${quantity.toFixed(4)} (${this.orderSize} USDT)`);
        this.orderManager.openEntryLongOrder(symbol, currentPrice, quantity);
        this.logger.log(`‚úÖ –ü–ï–†–í–ò–ß–ù–´–ô –õ–û–ù–ì –û–¢–ö–†–´–¢`);
      } else {
        // –£–°–†–ï–î–ù–ï–ù–ò–ï –ü–û –°–ò–ì–ù–ê–õ–£
        this.logger.log(`üìà –î–ï–ô–°–¢–í–ò–ï: –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ —Å–∏–≥–Ω–∞–ª—É EMA`);
        this.logger.log(`üì¶ –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–Ω–≥: ${quantity.toFixed(4)} –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ${position.totalLongSize.toFixed(4)}`);
        this.orderManager.openAverageLongOrder(symbol, currentPrice, quantity);
        this.logger.log(`‚úÖ –£–°–†–ï–î–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û`);
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
      if (position && position.shortOrders.length > 0) {
        this.logger.log(`üîÑ –î–ï–ô–°–¢–í–ò–ï: –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à–æ—Ä—Ç—ã`);
        const closedShorts = this.orderManager.closeAllShorts(symbol, currentPrice);
        this.logger.log(`‚úÖ –ó–ê–ö–†–´–¢–û ${closedShorts.length} –®–û–†–¢–û–í`);
      }

    } else if (type === 'CROSS_DOWN') {
      // –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
      
      if (position && position.totalLongSize > 0) {
        this.logger.log(`üìâ –î–ï–ô–°–¢–í–ò–ï: –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–Ω–≥–æ–≤ + —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ`);
        this.logger.log(`üìä –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ${position.totalLongSize.toFixed(4)} –ª–æ–Ω–≥–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–π ${position.averageLongPrice.toFixed(4)}`);

        // 1. –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–Ω–≥–æ–≤ —Å –ø—Ä–æ—Ñ–∏—Ç–æ–º
        const closeResult = this.orderManager.closeLastProfitableLongs(symbol, currentPrice);
        
        if (closeResult.closedOrders.length > 0) {
          this.logger.log(`üí∞ –ó–ê–ö–†–´–¢–û –õ–û–ù–ì–û–í: ${closeResult.closedOrders.length} —à—Ç.`);
          this.logger.log(`üí∞ –ü–†–û–§–ò–¢: +${closeResult.totalPnl.toFixed(2)} USDT`);
          this.logger.log(`üì¶ –ó–ê–ö–†–´–¢–û –û–ë–™–ï–ú–ê: ${closeResult.totalClosedQuantity.toFixed(4)}`);
        } else {
          this.logger.log(`‚ö†Ô∏è –ù–ï–¢ –ü–†–ò–ë–´–õ–¨–ù–´–• –õ–û–ù–ì–û–í –î–õ–Ø –ó–ê–ö–†–´–¢–ò–Ø`);
        }

        // 2. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ª–æ–Ω–≥–∏, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ö–µ–¥–∂
        if (closeResult.remainingLongSize > 0) {
          this.logger.log(`üõ°Ô∏è –î–ï–ô–°–¢–í–ò–ï: –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ö–µ–¥–∂ –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ª–æ–Ω–≥–∏`);
          this.logger.log(`üì¶ –†–∞–∑–º–µ—Ä —Ö–µ–¥–∂–∞: ${closeResult.remainingLongSize.toFixed(4)} (= –æ–±—ä–µ–º—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ª–æ–Ω–≥–æ–≤)`);
          this.orderManager.openHedgeShortOrder(symbol, currentPrice, closeResult.remainingLongSize);
          this.logger.log(`‚úÖ –•–ï–î–ñ –û–¢–ö–†–´–¢`);
        } else {
          this.logger.log(`‚úÖ –í–°–ï –õ–û–ù–ì–ò –ó–ê–ö–†–´–¢–´ - –•–ï–î–ñ –ù–ï –ù–£–ñ–ï–ù`);
        }
      } else {
        this.logger.log(`‚ö†Ô∏è –ù–ï–¢ –û–¢–ö–†–´–¢–´–• –õ–û–ù–ì–û–í - –î–ï–ô–°–¢–í–ò–ô –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø`);
      }
    }

    this.logger.log(`üéØ === –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –°–ò–ì–ù–ê–õ–ê ===\n`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≤–Ω–∏–∑
  private async checkForAveraging(symbol: string, currentPrice: number): Promise<void> {
    const position = this.orderManager.getPosition(symbol);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–Ω–≥–∏
    if (!position || position.totalLongSize === 0) return;

    const isAboveEMA = this.emaCalculator.isPriceAboveEMA(symbol, currentPrice);
    if (isAboveEMA === null) return;

    // –õ–æ–≥–∏–∫–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è:
    // 1. –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∏–∂–µ EMA –∏ —É –Ω–∞—Å –µ—Å—Ç—å –ª–æ–Ω–≥–∏ –±–µ–∑ —Ö–µ–¥–∂–∞ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞—â–∏—Ç–Ω—ã–π —Ö–µ–¥–∂
    if (!isAboveEMA && this.orderManager.hasUnhedgedLongs(symbol)) {
      this.logger.log(`\nüõ°Ô∏è === –ó–ê–©–ò–¢–ù–´–ô –•–ï–î–ñ –¥–ª—è ${symbol} ===`);
      this.logger.log(`‚ö†Ô∏è –ü–†–ò–ß–ò–ù–ê: –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∏–∂–µ EMA, –µ—Å—Ç—å –Ω–µ–∑–∞—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–Ω–≥–∏`);
      this.logger.log(`üì¶ –†–∞–∑–º–µ—Ä —Ö–µ–¥–∂–∞: ${position.totalLongSize.toFixed(4)} (= –æ–±—ä–µ–º—É –≤—Å–µ—Ö –ª–æ–Ω–≥–æ–≤)`);
      this.orderManager.openHedgeShortOrder(symbol, currentPrice, position.totalLongSize);
      this.logger.log(`‚úÖ –ó–ê–©–ò–¢–ù–´–ô –•–ï–î–ñ –û–¢–ö–†–´–¢\n`);
      return;
    }

    // 2. –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—à–µ EMA, –µ—Å—Ç—å –ª–æ–Ω–≥–∏ –∏ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –ª–æ–Ω–≥–æ–≤
    if (isAboveEMA && position.totalLongSize > 0) {
      const priceDropPercent = ((position.averageLongPrice - currentPrice) / position.averageLongPrice) * 100;
      
      // –£—Å—Ä–µ–¥–Ω—è–µ–º—Å—è –µ—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –ª–æ–Ω–≥–æ–≤
      if (priceDropPercent > 1.0) {
        const quantity = this.orderSize / currentPrice;
        
        this.logger.log(`\nüìä === –£–°–†–ï–î–ù–ï–ù–ò–ï –¥–ª—è ${symbol} ===`);
        this.logger.log(`üìâ –ü–†–ò–ß–ò–ù–ê: –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∞ ${priceDropPercent.toFixed(1)}% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –ª–æ–Ω–≥–æ–≤`);
        this.logger.log(`üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ª–æ–Ω–≥–æ–≤: ${position.averageLongPrice.toFixed(4)}`);
        this.logger.log(`üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice.toFixed(4)}`);
        this.logger.log(`üì¶ –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–Ω–≥: ${quantity.toFixed(4)} (${this.orderSize} USDT)`);
        
        this.orderManager.openAverageLongOrder(symbol, currentPrice, quantity);
        
        // –ï—Å–ª–∏ –±—ã–ª —Ö–µ–¥–∂, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ —Ä–∞–∑–º–µ—Ä
        if (position.isHedged) {
          const newTotalLongSize = position.totalLongSize + quantity;
          this.logger.log(`üîÑ –î–ï–ô–°–¢–í–ò–ï: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ö–µ–¥–∂–∞`);
          this.logger.log(`üì¶ –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ö–µ–¥–∂–∞: ${newTotalLongSize.toFixed(4)}`);
          this.orderManager.adjustHedgeSize(symbol, currentPrice, newTotalLongSize);
          this.logger.log(`‚úÖ –•–ï–î–ñ –°–ö–û–†–†–ï–ö–¢–ò–†–û–í–ê–ù`);
        }
        
        this.logger.log(`‚úÖ –£–°–†–ï–î–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û\n`);
      }
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  getStrategyStatus(): any {
    const stats = this.orderManager.getStats();
    const emaStats = this.emaCalculator.getStats();
    const positions = this.orderManager.getAllPositions();

    return {
      strategy: 'EMA Hedger v2.0',
      emaPeriod: this.emaPeriod,
      orderSize: this.orderSize,
      stats,
      emaTracking: emaStats.trackedSymbols,
      activePositions: positions.map(p => ({
        symbol: p.symbol,
        longOrders: p.longOrders.filter(o => o.status === 'OPEN').length,
        shortOrders: p.shortOrders.filter(o => o.status === 'OPEN').length,
        totalLongSize: p.totalLongSize.toFixed(4),
        totalShortSize: p.totalShortSize.toFixed(4),
        averagePrice: p.averageLongPrice.toFixed(4),
        isHedged: p.isHedged,
        lastIndex: p.lastLongIndex,
      })),
      description: {
        logic: 'EMA –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è + —É–º–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ + —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ',
        longEntry: '–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ EMA —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö',
        shortEntry: '–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ EMA —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ (—Ö–µ–¥–∂ —Ä–∞–≤–Ω—ã–π –æ–±—ä–µ–º—É –ª–æ–Ω–≥–æ–≤)',
        averaging: '–ü—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ >1% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –ª–æ–Ω–≥–æ–≤ –≤—ã—à–µ EMA',
        partialClose: '–ó–∞–∫—Ä—ã—Ç–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–Ω–≥–æ–≤ —Å –æ–±—â–∏–º –ø—Ä–æ—Ñ–∏—Ç–æ–º',
      },
    };
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  logStats(): void {
    const stats = this.orderManager.getStats();
    
    this.logger.log(`\nüìä === –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===`);
    this.logger.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${stats.balance.toFixed(2)} USDT`);
    this.logger.log(`üìà –û–±—â–∏–π PnL: ${stats.totalPnl >= 0 ? '+' : ''}${stats.totalPnl.toFixed(2)} USDT`);
    this.logger.log(`üìä –í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: ${stats.totalOrders} (L: ${stats.longOrders}, S: ${stats.shortOrders})`);
    this.logger.log(`üìä –ó–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫: ${stats.closedOrders}`);
    this.logger.log(`üìä –í–∏–Ω—Ä–µ–π—Ç: ${stats.winRate.toFixed(1)}%`);
    this.logger.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: ${stats.activePositions}`);

    // –î–µ—Ç–∞–ª–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º
    const positions = this.orderManager.getAllPositions();
    if (positions.length > 0) {
      this.logger.log(`\nüî• === –ê–ö–¢–ò–í–ù–´–ï –ü–û–ó–ò–¶–ò–ò ===`);
      
      positions.forEach(p => {
        const openLongs = p.longOrders.filter(o => o.status === 'OPEN').length;
        const openShorts = p.shortOrders.filter(o => o.status === 'OPEN').length;
        const hedgeStatus = p.isHedged ? 'üõ°Ô∏è –ó–ê–•–ï–î–ñ–ò–†–û–í–ê–ù–û' : '‚ö†Ô∏è –ë–ï–ó –•–ï–î–ñ–ê';
        
        this.logger.log(`üìç ${p.symbol}:`);
        this.logger.log(`   üì¶ –õ–æ–Ω–≥–æ–≤: ${openLongs} —à—Ç. (${p.totalLongSize.toFixed(4)} –æ–±—ä–µ–º)`);
        this.logger.log(`   üì¶ –®–æ—Ä—Ç–æ–≤: ${openShorts} —à—Ç. (${p.totalShortSize.toFixed(4)} –æ–±—ä–µ–º)`);
        this.logger.log(`   üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ª–æ–Ω–≥–æ–≤: ${p.averageLongPrice.toFixed(4)}`);
        this.logger.log(`   ${hedgeStatus}`);
        this.logger.log(`   üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å: ${p.lastLongIndex}`);
      });
    }
    this.logger.log(`üìä === –ö–û–ù–ï–¶ –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===\n`);
  }
}
