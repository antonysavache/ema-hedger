// –¢–µ—Å—Ç –º–Ω–æ–≥–æ—Å–∏–º–≤–æ–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function testMultiSymbolStrategy() {
  console.log('üöÄ –¢–µ—Å—Ç EMA Hedger Strategy v2.0 - –¢–æ–ø 150 –º–æ–Ω–µ—Ç');
  console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: EMA 130, 1% –Ω–∞ –≤—Ö–æ–¥, 5–º —Ç–∞–π–º—Ñ—Ä–µ–π–º\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    console.log('üìä 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å...');
    const initialStatus = await axios.get(`${BASE_URL}/trading-status`);
    console.log(`   –¢–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–Ω–∞: ${initialStatus.data.isTrading ? '‚úÖ' : '‚ùå'}`);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å–∏–º–≤–æ–ª—ã
    console.log('\nüìà 2. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å–∏–º–≤–æ–ª—ã...');
    const topSymbols = await axios.get(`${BASE_URL}/top-symbols?limit=10`);
    console.log(`   –¢–æ–ø-10 —Å–∏–º–≤–æ–ª–æ–≤: ${topSymbols.data.symbols.join(', ')}`);

    // 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
    console.log('\nüéØ 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –ø–æ —Ç–æ–ø 20 —Å–∏–º–≤–æ–ª–∞–º (–¥–ª—è —Ç–µ—Å—Ç–∞)...');
    const startResponse = await axios.post(`${BASE_URL}/start-trading`, {
      symbolCount: 20
    });
    console.log(`   ${startResponse.data.message}`);

    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    console.log('\n‚è≥ –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EMA (10 —Å–µ–∫—É–Ω–¥)...');
    await new Promise(resolve => setTimeout(resolve, 10000));

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    console.log('\nüìã 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã...');
    const activeSymbols = await axios.get(`${BASE_URL}/active-symbols`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: ${activeSymbols.data.count}`);
    console.log(`   –ü—Ä–∏–º–µ—Ä—ã: ${activeSymbols.data.symbols.slice(0, 5).join(', ')}`);

    // 5. –°–º–æ—Ç—Ä–∏–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    console.log('\nüíº 5. –°—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ...');
    const portfolio = await axios.get(`${BASE_URL}/portfolio`);
    console.log(`   –ë–∞–ª–∞–Ω—Å: ${portfolio.data.summary.balance.toFixed(2)} USDT`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: ${portfolio.data.summary.activePositions}`);
    console.log(`   PnL: ${portfolio.data.summary.totalPnL >= 0 ? '+' : ''}${portfolio.data.summary.totalPnL.toFixed(2)} USDT`);

    // 6. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Ä—ã–Ω–∫–∞
    console.log('\nüé≠ 6. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Ä—ã–Ω–∫–∞ (60 —Å–µ–∫—É–Ω–¥)...');
    const simulationPromise = axios.post(`${BASE_URL}/simulate-market`, {
      duration: 60,
      symbols: activeSymbols.data.symbols.slice(0, 5)
    });

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    console.log('   üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥...\n');
    
    const monitoringInterval = setInterval(async () => {
      try {
        const currentPortfolio = await axios.get(`${BASE_URL}/portfolio`);
        const stats = currentPortfolio.data.summary;
        
        console.log(`   üí∞ –ë–∞–ª–∞–Ω—Å: ${stats.balance.toFixed(2)} | PnL: ${stats.totalPnL >= 0 ? '+' : ''}${stats.totalPnL.toFixed(2)} | –ü–æ–∑–∏—Ü–∏–π: ${stats.activePositions} | WR: ${stats.winRate.toFixed(1)}%`);
      } catch (e) {
        console.log('   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
      }
    }, 15000);

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏
    const simulationResult = await simulationPromise;
    clearInterval(monitoringInterval);

    console.log(`\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${simulationResult.data.totalTicks} —Ç–∏–∫–æ–≤`);

    // 7. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä 7. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...');
    await axios.get(`${BASE_URL}/stats`);

    const finalPortfolio = await axios.get(`${BASE_URL}/portfolio`);
    const finalStats = finalPortfolio.data.summary;

    console.log('\nüéâ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
    console.log(`üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${finalStats.balance.toFixed(2)} USDT`);
    console.log(`üìà –û–±—â–∏–π PnL: ${finalStats.totalPnL >= 0 ? '+' : ''}${finalStats.totalPnL.toFixed(2)} USDT`);
    console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: ${finalStats.activePositions}`);
    console.log(`üéØ –í–∏–Ω—Ä–µ–π—Ç: ${finalStats.winRate.toFixed(1)}%`);
    console.log(`üî• –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: ${finalStats.totalSymbols}`);

    // 8. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
    console.log('\nüõë 8. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é...');
    const stopResponse = await axios.post(`${BASE_URL}/stop-trading`);
    console.log(`   ${stopResponse.data.message}`);

  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run start:dev');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
      if (error.response?.data) {
        console.error('   –î–µ—Ç–∞–ª–∏:', error.response.data);
      }
    }
  }
}

// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç API
async function quickAPITest() {
  console.log('\nüß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç API...\n');

  const tests = [
    { name: '–°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', url: '/status' },
    { name: '–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏', url: '/trading-status' },
    { name: '–¢–æ–ø-5 —Å–∏–º–≤–æ–ª–æ–≤', url: '/top-symbols?limit=5' },
    { name: '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ', url: '/portfolio' }
  ];

  for (const test of tests) {
    try {
      const response = await axios.get(`${BASE_URL}${test.url}`);
      console.log(`‚úÖ ${test.name}: OK`);
      
      if (test.url === '/top-symbols?limit=5') {
        console.log(`   –°–∏–º–≤–æ–ª—ã: ${response.data.symbols.join(', ')}`);
      }
    } catch (error) {
      console.log(`‚ùå ${test.name}: ${error.message}`);
    }
  }
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async function testManagement() {
  console.log('\nüéõÔ∏è –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...\n');

  try {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª
    console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º LINKUSDT...');
    const addResponse = await axios.post(`${BASE_URL}/add-symbol`, {
      symbol: 'LINKUSDT'
    });
    console.log(`   ${addResponse.data.message}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    const activeResponse = await axios.get(`${BASE_URL}/active-symbols`);
    console.log(`   –¢–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: ${activeResponse.data.count}`);

    // –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª
    console.log('\n‚ûñ –£–¥–∞–ª—è–µ–º LINKUSDT...');
    const removeResponse = await axios.post(`${BASE_URL}/remove-symbol`, {
      symbol: 'LINKUSDT'
    });
    console.log(`   ${removeResponse.data.message}`);

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${error.message}`);
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runTests() {
  console.log('üöÄ EMA Hedger v2.0 - –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
  console.log('=' .repeat(60));

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    await axios.get(`${BASE_URL}/status`);
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω\n');

    // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç API
    await quickAPITest();

    // –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await testManagement();

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    await testMultiSymbolStrategy();

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.error('\n‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!');
      console.error('–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: npm run start:dev');
    } else {
      console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  runTests();
}

module.exports = { testMultiSymbolStrategy, quickAPITest, testManagement };
