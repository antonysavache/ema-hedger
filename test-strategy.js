// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã
const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

// –°–∏–º—É–ª—è—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è–º–∏ EMA
async function testStrategy() {
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...\n');

  // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–∏—Ç—É–∞—Ü–∏—é:
  // 1. –¶–µ–Ω–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç EMA —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö (–¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã—Ç—å—Å—è LONG)
  // 2. –¶–µ–Ω–∞ –∏–¥–µ—Ç –≤–Ω–∏–∑ (—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ + —Ö–µ–¥–∂)
  // 3. –¶–µ–Ω–∞ —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç EMA —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö (–∑–∞–∫—Ä—ã—Ç–∏–µ —à–æ—Ä—Ç–∞, –Ω–æ–≤—ã–π –ª–æ–Ω–≥)
  // 4. –¶–µ–Ω–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç EMA —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ (—á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–Ω–≥–æ–≤ + –Ω–æ–≤—ã–π —Ö–µ–¥–∂)

  const priceMovement = [
    // –ù–∞—á–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∏–∂–µ EMA –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (50 —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ EMA)
    ...Array.from({length: 50}, (_, i) => 45 + i * 0.1), // 45.0 –¥–æ 49.9
    
    // –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö - –¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã—Ç—å—Å—è LONG
    50.5, 51.0, 51.5,
    
    // –¶–µ–Ω–∞ –∏–¥–µ—Ç –≤–Ω–∏–∑ - —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ + —Ö–µ–¥–∂
    51.0, 50.5, 50.0, 49.5, 49.0, 48.5,
    
    // –°–Ω–æ–≤–∞ –≤–≤–µ—Ä—Ö —á–µ—Ä–µ–∑ EMA - –∑–∞–∫—Ä—ã—Ç–∏–µ —à–æ—Ä—Ç–∞
    49.0, 49.5, 50.0, 50.5, 51.0, 51.5, 52.0,
    
    // –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ - —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–Ω–≥–æ–≤ + —Ö–µ–¥–∂
    51.5, 51.0, 50.5, 50.0, 49.5, 49.0,
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    49.5, 50.0, 50.5, 51.0, 52.0, 53.0, 54.0
  ];

  try {
    console.log('üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã...');
    const response = await axios.post(`${BASE_URL}/simulate-price-movement`, {
      symbol: 'BTCUSDT',
      prices: priceMovement
    });

    console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º—É–ª—è—Ü–∏–∏:');
    console.log(JSON.stringify(response.data, null, 2));

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìà –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
    const statsResponse = await axios.get(`${BASE_URL}/stats`);
    
    const statusResponse = await axios.get(`${BASE_URL}/status`);
    console.log('\nüìã –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:');
    console.log(JSON.stringify(statusResponse.data, null, 2));

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    if (error.response) {
      console.error('Response data:', error.response.data);
    }
  }
}

// –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
async function testSpecificScenario() {
  console.log('\nüé≤ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π...\n');
  
  const scenarios = [
    { 
      name: 'üìà –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ EMA —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö', 
      kline: {
        symbol: 'ETHUSDT',
        openTime: Date.now() - 1000,
        closeTime: Date.now(),
        open: '49.5',
        high: '50.5', 
        low: '49.5',
        close: '50.5',
        volume: '1000'
      }
    },
    {
      name: 'üìâ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ EMA —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑',
      kline: {
        symbol: 'ETHUSDT', 
        openTime: Date.now() - 1000,
        closeTime: Date.now(),
        open: '50.5',
        high: '50.5',
        low: '49.5', 
        close: '49.5',
        volume: '1000'
      }
    }
  ];

  try {
    for (const scenario of scenarios) {
      console.log(`\n${scenario.name}`);
      
      const response = await axios.post(`${BASE_URL}/process-kline`, scenario.kline);
      console.log(`‚úÖ ${response.data.message} –¥–ª—è ${response.data.symbol}`);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    const statusResponse = await axios.get(`${BASE_URL}/status`);
    console.log('\nüìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:');
    console.log(JSON.stringify(statusResponse.data.activePositions, null, 2));

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
  console.log('üöÄ EMA Hedger Strategy - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç\n');
  console.log('=' .repeat(60));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    await axios.get(`${BASE_URL}/status`);
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω\n');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    await testStrategy();
    
    console.log('\n' + '='.repeat(60));
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤  
    await testSpecificScenario();
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run start:dev');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  runAllTests();
}

module.exports = { testStrategy, testSpecificScenario, runAllTests };
